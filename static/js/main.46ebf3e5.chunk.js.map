{"version":3,"sources":["data/Query.js","components/UsersOnline.jsx","components/LogoutButton.jsx","components/Message.jsx","components/MessagesContainer.jsx","view/Chat.jsx","view/UserForm.jsx","App.jsx","index.js"],"names":["UserQuery","gql","UsersOnlineQuery","MessagesQuery","CreateMessageMutation","UserLoginMutation","UserLogoutMutation","UsersOnlineSubscription","NewMessageSubscription","UsersOnline","props","usersOnline","useQuery","subscribeToMore","result","document","updateQuery","prev","subscriptionData","data","newUserOnline","console","log","Object","assign","className","LogoutButton","history","useHistory","user","useMutation","onCompleted","logoutUser","localStorage","removeItem","push","Button","onClick","variables","id","nickname","Message","token","getItem","style","backgroundColor","marginRight","marginLeft","userId","margin","content","date","Date","createdAt","hora","getHours","getMinutes","MessagesContainer","_","messages","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","loading","error","newFeedItem","newMessage","messagesLi","map","message","ref","Chat","userID","useState","setNewMessage","listener","event","code","shiftKey","createMessage","addEventListener","removeEventListener","userRes","Row","Col","xs","name","cols","rows","value","onChange","e","target","UserForm","userState","setUserState","loginUser","setItem","Container","md","onSubmit","preventDefault","submitUser","type","App","path","titulo","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","lazy","inactivityTimeout","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","getElementById"],"mappings":"oaAWMA,GATaC,YAAH,0FASEA,YAAH,2GASTC,EAAmBD,YAAH,8DAMhBE,EAAgBF,YAAH,gKAcbG,EAAwBH,YAAH,iUAoBrBI,EAAoBJ,YAAH,6IASjBK,EAAqBL,YAAH,4HAMlBM,EAA0BN,YAAH,mEAMvBO,EAAyBP,YAAH,8J,GAaEA,YAAH,mGASIA,YAAH,oG,wBClEbQ,MA7Bf,SAAqBC,GAEjB,IAAIC,EAAc,EAFM,EAKeC,mBAASV,GAAxCW,EALgB,EAKhBA,gBAAoBC,EALJ,mCAsBxB,OAhBAD,EAAgB,CACdE,SAAUR,EACVS,YAAa,SAACC,EAAD,GAAiC,IAAxBC,EAAuB,EAAvBA,iBACpB,IAAKA,EAAiBC,KAAM,OAAOF,EACnC,IAAMG,EAAgBF,EAAiBC,KAAKR,YAE5C,OADAU,QAAQC,IAAIF,GACLG,OAAOC,OAAO,GAAIP,EAAM,CAC3BN,YAAaS,OAIlBN,EAAOK,OACRR,EAAcG,EAAOK,KAAKR,aAKxB,qCACI,qBAAKc,UAAU,WACf,4CAAed,S,OCGZe,MA3Bf,SAAsBhB,GAClB,IAAMiB,EAAUC,cACVC,EAAOnB,EAAMmB,KAFM,EAIJC,sBAAYxB,EAAmB,CAChDyB,YADgD,YACpB,EAAdC,aAEVC,aAAaC,WAAW,SACxBP,EAAQQ,KAAK,SAJdH,EAJkB,oBAazB,OACI,mCACI,cAACI,EAAA,EAAD,CAAQX,UAAU,2BAA2BY,QAAU,WACrDL,EAAW,CACTM,UAAU,CACNC,GAAIV,EAAKU,GACTC,SAAUX,EAAKW,aAJvB,qB,gBCiBGC,MAtCf,SAAiB/B,GACb,IAAMgC,EAAQT,aAAaU,QAAQ,SAC/BC,EAAQ,CACRC,gBAAgB,UAChBC,YAAa,OACbC,WAAW,OAWf,GARGrC,EAAMsC,SAAWN,IAChBE,EAAQ,CACJC,gBAAgB,UAChBE,WAAY,OACZD,YAAY,QAIA,OAAjBpC,EAAMsC,OAIL,OAHAJ,EAAQ,CACJK,OAAO,QAGX,qBAAKxB,UAAU,UAAUmB,MAAOA,EAAhC,SACI,mBAAGnB,UAAU,QAAb,SAAsBf,EAAMwC,YAKpC,IAAIC,EAAO,IAAIC,KAAK1C,EAAM2C,WACtBC,EAAQH,EAAKI,WAAW,KAAMJ,EAAKK,aAAe,GAAM,IAAKL,EAAKK,aAAeL,EAAKK,cAE1F,OACI,sBAAK/B,UAAU,UAAUmB,MAAOA,EAAhC,UACI,oBAAInB,UAAU,SAAd,SAAwBf,EAAMmB,OAC9B,oBAAGJ,UAAU,QAAb,UAAsBf,EAAMwC,QAA5B,IAAqC,sBAAMzB,UAAU,OAAhB,SAAwB6B,WCkB1DG,MA7Cf,SAA2BC,GACvB,IAAIC,EAAW,GAGTC,EAAiBC,iBAAO,MAM9BC,qBALuB,WAChBF,EAAeG,SACdH,EAAeG,QAAQC,eAAe,CAAEC,SAAU,aAGhC,CAACN,IAVD,MAayB/C,mBAAST,GAAnD+D,EAbiB,EAajBA,QAASC,EAbQ,EAaRA,MAAOhD,EAbC,EAaDA,KAY3B,IAXEN,EAd0B,EAaKA,iBACf,CACZE,SAAUP,EACVQ,YAAa,SAACC,EAAD,GAAiC,IAAxBC,EAAuB,EAAvBA,iBACtB,IAAKA,EAAiBC,KAAM,OAAOF,EACnC,IAAMmD,EAAclD,EAAiBC,KAAKkD,WAC1C,OAAO9C,OAAOC,OAAO,GAAIP,EAAM,CAC3B0C,SAAS,CAAES,GAAH,mBAAmBnD,EAAK0C,gBAKrCO,EAAW,OAAO,2CACvB,GAAKC,EAAQ,OAAO,yCACjBhD,IACDwC,EAAWxC,EAAKwC,UAIlB,IAAMW,EAAaX,EAASY,KAAI,SAACC,GAC/B,OACE,cAAC,EAAD,CAA0BxB,OAAQwB,EAAQ3C,KAAKU,GAAIV,KAAM2C,EAAQ3C,KAAKW,SAAUU,QAASsB,EAAQtB,QAASG,UAAWmB,EAAQnB,WAA/GmB,EAAQjC,OAIxB,OACI,qCACK+B,EACD,qBAAKG,IAAKb,QChCP,SAASc,EAAKhE,GAC3B,IAAMiB,EAAUC,cACZC,EAAO,GAGL8C,EAAS1C,aAAaU,QAAQ,UAAYhB,EAAQQ,KAAK,KAL3B,EAQAyC,mBAAS,IART,mBAQ5BP,EAR4B,KAQjBQ,EARiB,KAYlCf,qBAAU,WACR,IAAMgB,EAAW,SAAAC,GACM,UAAfA,EAAMC,MAAmC,gBAAfD,EAAMC,MAA4BD,EAAME,WAGpD,KAAfZ,GACDa,EAAc,CACZ5C,UAAU,CACRY,QAASmB,EACT9B,GAAGV,EAAKU,GACRC,SAASX,EAAKW,YAGlBqC,EAAc,MAEdxD,QAAQC,IAAmB,KAAf+C,GACZhD,QAAQC,WAAW+C,GACnBhD,QAAQC,IAAI+C,MAKlB,OADAtD,SAASoE,iBAAiB,UAAWL,GAC9B,WACL/D,SAASqE,oBAAoB,UAAWN,MAEzC,CAACT,IArC8B,MAyCVvC,sBAAY1B,GAA7B8E,EAzC2B,oBA4C5BG,EAAUzE,mBAASZ,EAAU,CAACsC,UAAU,CAACC,GAAGoC,KAElD,OAAKU,EAAQnB,QAAkB,2CAC1BmB,EAAQlB,MAAkB,0CAC1BkB,EAAQlE,OAAWU,EAAOwD,EAAQlE,KAAKU,MAI1C,sBAAKJ,UAAU,OAAf,UACE,sBAAKA,UAAU,QAAf,UACE,+CAAkBI,EAAKW,YACvB,sBAAKf,UAAU,iBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAcI,KAAMA,UAGxB,cAAC,IAAD,CAAWJ,UAAU,UAArB,SACE,cAAC,EAAD,MAEF,eAAC6D,EAAA,EAAD,CAAK7D,UAAU,eAAf,UACE,cAAC8D,EAAA,EAAD,CAAKC,GAAI,EAAG/D,UAAU,qBAAtB,SACE,0BAAUgE,KAAK,GAAGlD,GAAG,GAAGmD,KAAK,KAAKC,KAAK,KAAKC,MAAOvB,EAAYwB,SAAU,SAAAC,GAAC,OAAGjB,EAAciB,EAAEC,OAAOH,YAEtG,cAACL,EAAA,EAAD,CAAK9D,UAAU,sBAAf,SACE,cAACW,EAAA,EAAD,CAAQX,UAAU,cAAcY,QAAS,WACvC6C,EAAc,CACZ5C,UAAU,CACRY,QAASmB,EACT9B,GAAGV,EAAKU,GACRC,SAASX,EAAKW,YAGlBqC,EAAc,KARhB,6B,4BC9EK,SAASmB,EAAStF,GAG7B,IAAMiB,EAAUC,cAHoB,EAIFgD,mBAAS,CACvCrC,GAAG,GACHC,SAAU,KANsB,mBAI7ByD,EAJ6B,KAIlBC,EAJkB,KAWzBjE,aAAaU,QAAQ,UAE5BhB,EAAQQ,KAAK,SAbmB,MAkBhBL,sBAAYzB,EAC5B,CACE0B,YADF,YAC8B,IAAdoE,EAAa,EAAbA,UACRA,IACFlE,aAAamE,QAAQ,QAASD,EAAU5D,IACxCZ,EAAQQ,KAAK,aALhBgE,EAlB6B,oBAsCtC,OACE,cAACE,EAAA,EAAD,CAAW5E,UAAU,iBAArB,SACI,sBAAKA,UAAU,eAAf,UAEA,cAAC6D,EAAA,EAAD,CAAK7D,UAAU,4BAAf,SACI,cAAC8D,EAAA,EAAD,CAAKe,GAAI,EAAT,SACI,6DAGR,cAAChB,EAAA,EAAD,CAAK7D,UAAU,4BAAf,SACI,cAAC8D,EAAA,EAAD,CAAKe,GAAI,EAAT,SACI,sBAAM7E,UAAU,YAAY8E,SAAU,SAACT,GAAD,OArB9B,SAACA,GACbA,EAAEU,iBACFL,EAAU,CACN7D,UAAU,CACNE,SAAUyD,EAAUzD,YAiBqBiE,CAAWX,IAAxD,SACI,eAACR,EAAA,EAAD,CAAK7D,UAAU,4BAAf,UACI,cAAC8D,EAAA,EAAD,CAAKC,GAAI,EAAT,SACI,uBAAO/D,UAAU,aAAamE,MAAOK,EAAUzD,SAAUqD,SAAU,SAACC,GAAD,OAC/DI,EAAa,2BACND,GADK,IAERzD,SAAUsD,EAAEC,OAAOH,cAM/B,cAACL,EAAA,EAAD,CAAKC,GAAI,EAAT,SACI,cAACpD,EAAA,EAAD,CAAQsE,KAAK,SAASjF,UAAU,cAAhC,4CChEb,SAASkF,EAAIjG,GAIxB,OACI,mCACA,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOkG,KAAK,QAAZ,SACI,cAAC,EAAD,CAAMC,OAAO,WAEjB,cAAC,IAAD,CAAOD,KAAK,IAAZ,SACI,cAAC,EAAD,CAAUC,OAAO,yBCLrC,IAAMC,EAAW,IAAIC,WAAS,CAC5BC,IAAK,2BAIDC,EAAS,IAAIC,IAAc,CAC/BF,IAAI,8BACJG,QAAS,CACPC,WAAW,EACXC,MAAM,EACNC,kBAAmB,OAMjBC,EAAOC,iBAEX,YAAgB,IAAbC,EAAY,EAAZA,MAAY,EACeC,YAAkBD,GAAtCE,EADK,EACLA,KAAMC,EADD,EACCA,UACd,MAAgB,wBAATD,GAAgD,iBAAdC,IAE3CX,EACAH,GAGIe,EAAS,IAAIC,eAAa,CAC9BP,OACAQ,MAAO,IAAIC,kBAIbC,IAASC,OACP,cAAC,iBAAD,CAAgBL,OAAQA,EAAxB,SACE,cAAClB,EAAD,MAEF5F,SAASoH,eAAe,W","file":"static/js/main.46ebf3e5.chunk.js","sourcesContent":["import gql from 'graphql-tag';\r\n\r\nconst UsersQuery = gql`\r\n  query {\r\n    users {\r\n      id\r\n      nickname\r\n    }\r\n  }\r\n`;\r\n\r\nconst UserQuery = gql`\r\n  query($id:ID!) {\r\n    user(id:$id) {\r\n      id\r\n      nickname\r\n    }\r\n  }\r\n`;\r\n\r\nconst UsersOnlineQuery = gql`\r\n  query {\r\n    usersOnline \r\n  }\r\n`;\r\n\r\nconst MessagesQuery = gql`\r\n  query {\r\n    messages{\r\n      id\r\n      content\r\n      createdAt\r\n      user{\r\n        id\r\n        nickname\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CreateMessageMutation = gql`\r\n  mutation($content:String!,$id:ID!,$nickname:String!){\r\n    createMessage(message:{\r\n      content:$content\r\n      user:{\r\n        id:$id\r\n        nickname:$nickname\r\n      }\r\n    }){\r\n      id\r\n      content\r\n      user{ \r\n        id\r\n        nickname\r\n      }\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nconst UserLoginMutation = gql`\r\n  mutation($nickname:String!){\r\n    loginUser(user:{nickname:$nickname}){\r\n      id\r\n      nickname\r\n    }\r\n  }\r\n`;\r\n\r\nconst UserLogoutMutation = gql`\r\n  mutation($id:ID!, $nickname:String!){\r\n    logoutUser(user:{id:$id,nickname:$nickname})\r\n  }\r\n`;\r\n\r\nconst UsersOnlineSubscription = gql`\r\n  subscription{\r\n    usersOnline\r\n  }\r\n`;\r\n\r\nconst NewMessageSubscription = gql`\r\n  subscription{\r\n    newMessage{\r\n      content\r\n      createdAt\r\n      user{\r\n        id\r\n        nickname\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst UserLoginSubscription = gql`\r\n  subscription{\r\n    userLogin{\r\n      id\r\n      nickname\r\n    }\r\n  }\r\n`;\r\n\r\nconst UserLogoutSubscription = gql`\r\n  subscription{\r\n    userLogout{\r\n      id\r\n      nickname\r\n    }\r\n  }\r\n`;\r\n\r\nexport {\r\n  UserQuery,\r\n  UsersQuery,\r\n  UsersOnlineQuery,\r\n  MessagesQuery,\r\n  CreateMessageMutation,\r\n  UserLoginMutation,\r\n  UserLogoutMutation,\r\n  UsersOnlineSubscription,\r\n  NewMessageSubscription,\r\n  UserLoginSubscription,\r\n  UserLogoutSubscription\r\n};","import React from 'react'\r\nimport './UsersOnline.css';\r\nimport { useQuery } from '@apollo/client';\r\nimport {\r\n    UsersOnlineQuery,\r\n    UsersOnlineSubscription,\r\n  } from '../data/Query';\r\n\r\nfunction UsersOnline(props) {\r\n    //inicializa com zero\r\n    let usersOnline = 0;\r\n\r\n    //faz a query e continua escutando para alterações na qtd de usuarios online\r\n    const { subscribeToMore, ...result } = useQuery(UsersOnlineQuery);\r\n    subscribeToMore({\r\n      document: UsersOnlineSubscription,\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n        const newUserOnline = subscriptionData.data.usersOnline;\r\n        console.log(newUserOnline);\r\n        return Object.assign({}, prev, {\r\n            usersOnline: newUserOnline\r\n          });  \r\n      }\r\n    });\r\n    if(result.data){\r\n      usersOnline = result.data.usersOnline;\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            <div className=\"online\"></div>\r\n            <span>Online: {usersOnline}</span>\r\n        </>\r\n    )\r\n}\r\nexport default UsersOnline;","import React from 'react'\r\nimport './LogoutButton.css';\r\nimport { useMutation } from '@apollo/client';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button} from 'react-bootstrap';\r\nimport {\r\n    UserLogoutMutation\r\n  } from '../data/Query';\r\n\r\nfunction LogoutButton(props) {\r\n    const history = useHistory();\r\n    const user = props.user;\r\n\r\n    const [logoutUser] = useMutation(UserLogoutMutation,{\r\n        onCompleted({ logoutUser }) {\r\n          if (logoutUser) {\r\n            localStorage.removeItem('token');\r\n            history.push(\"/\");\r\n          }\r\n        }\r\n      });\r\n\r\n    return(\r\n        <>\r\n            <Button className=\"logout-button btn-danger\" onClick={ () => {\r\n              logoutUser({\r\n                variables:{\r\n                    id: user.id,\r\n                    nickname: user.nickname\r\n                }\r\n              })\r\n            }            \r\n            }>Sair</Button>\r\n        </>\r\n    )\r\n}\r\nexport default LogoutButton;","import React from 'react'\r\nimport './Message.css';\r\n\r\nfunction Message(props) {\r\n    const token = localStorage.getItem('token');\r\n    let style = {\r\n        backgroundColor:\"#393e46\",\r\n        marginRight: \"auto\",\r\n        marginLeft:\"1vw\"\r\n    }\r\n\r\n    if(props.userId === token){\r\n        style = {\r\n            backgroundColor:\"#38ac85\",\r\n            marginLeft: \"auto\",\r\n            marginRight:\"1vw\"\r\n        }\r\n\r\n    }\r\n    if(props.userId === null){\r\n        style = {\r\n            margin:\"auto\",\r\n        }\r\n        return(\r\n        <div className=\"Message\" style={style}>\r\n            <p className=\"Corpo\">{props.content}</p>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    let date = new Date(props.createdAt);\r\n    let hora = (date.getHours()+\":\"+((date.getMinutes() < 10) ? \"0\"+ date.getMinutes() : date.getMinutes()));\r\n\r\n    return(\r\n        <div className=\"Message\" style={style}>\r\n            <h2 className=\"Titulo\">{props.user}</h2>\r\n            <p className=\"Corpo\">{props.content} <span className=\"Hora\">{hora}</span></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React,  {  useEffect, useRef } from \"react\";\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport Message from \"./Message\";\r\nimport {\r\n    MessagesQuery,\r\n    NewMessageSubscription\r\n  } from '../data/Query';\r\n\r\nfunction MessagesContainer(_) {\r\n    let messages = [];\r\n\r\n    //funcionamento do scroll bar\r\n    const messagesEndRef = useRef(null);\r\n    const scrollToBottom = () => {\r\n        if(messagesEndRef.current){\r\n            messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    };\r\n    useEffect(scrollToBottom, [messages]);\r\n\r\n    //query das mensagens com subscribe\r\n    const  { loading, error, data, subscribeToMore } = useQuery(MessagesQuery);\r\n    subscribeToMore({\r\n        document: NewMessageSubscription,\r\n        updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n        const newFeedItem = subscriptionData.data.newMessage;\r\n        return Object.assign({}, prev, {\r\n            messages: [newFeedItem, ...prev.messages]\r\n        });  \r\n        }\r\n    });\r\n\r\n  if ( loading  ) return <p>Loading...</p>;\r\n  if ( error ) return <p>Error :(</p>;\r\n  if(data) {\r\n    messages = data.messages;\r\n  }\r\n\r\n\r\n  const messagesLi = messages.map((message) => {\r\n    return (\r\n      <Message key={message.id} userId={message.user.id} user={message.user.nickname} content={message.content} createdAt={message.createdAt} />\r\n    )\r\n  })\r\n\r\n    return(\r\n        <>\r\n            {messagesLi}\r\n            <div ref={messagesEndRef} />\r\n        </>\r\n    )\r\n}\r\nexport default MessagesContainer;","import React,  { useState, useEffect } from \"react\";\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Row, Col, Button} from 'react-bootstrap';\r\nimport \"./Chat.css\";\r\n\r\nimport SimpleBar from 'simplebar-react';\r\nimport 'simplebar/dist/simplebar.min.css';\r\n\r\nimport {\r\n  UserQuery,\r\n  CreateMessageMutation,\r\n} from '../data/Query';\r\n\r\nimport UsersOnline from \"../components/UsersOnline\";\r\nimport LogoutButton from \"../components/LogoutButton\";\r\nimport MessagesContainer from \"../components/MessagesContainer\";\r\n\r\nexport default function Chat(props) {\r\n  const history = useHistory();\r\n  let user = {};\r\n  \r\n  //verifica se o ID esta guardado, ou redireciona para o login\r\n  const userID =(localStorage.getItem('token') || history.push(\"/\"));\r\n\r\n  //usestate para manipular input de nova mensagem\r\n  const[newMessage,setNewMessage] = useState('');\r\n\r\n\r\n  //event listener para enviar mensagem com ENTER\r\n  useEffect(() => {\r\n    const listener = event => {\r\n      if ( (event.code === \"Enter\" || event.code === \"NumpadEnter\") && !event.shiftKey) {\r\n        // event.preventDefault();\r\n        //apenas enviar caso tenha algo digitado.\r\n        if(newMessage !== ''){\r\n          createMessage({\r\n            variables:{\r\n              content: newMessage,\r\n              id:user.id,\r\n              nickname:user.nickname\r\n            }\r\n          });\r\n          setNewMessage('');\r\n        }else{\r\n          console.log(newMessage === '');\r\n          console.log(typeof(newMessage));\r\n          console.log(newMessage);\r\n        }\r\n      }\r\n    };\r\n    document.addEventListener(\"keydown\", listener);\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", listener);\r\n    };\r\n  }, [newMessage]);\r\n\r\n\r\n  //mutation para enviar nova mensagem\r\n  const [createMessage] = useMutation(CreateMessageMutation);\r\n  \r\n  //query do usuario logado\r\n  const userRes = useQuery(UserQuery,{variables:{id:userID}});\r\n\r\n  if ( userRes.loading )  return <p>Loading...</p>;\r\n  if ( userRes.error )    return <p>Error :(</p>;\r\n  if ( userRes.data )     user = userRes.data.user\r\n  \r\n\r\n  return (\r\n    <div className=\"Chat\">\r\n      <div className=\"Title\">\r\n        <span>Bem-vindo, {user.nickname}</span>\r\n        <div className=\"online-wrapper\">\r\n          <UsersOnline />\r\n          <LogoutButton user={user} />\r\n        </div>\r\n      </div>\r\n      <SimpleBar className=\"Content\">\r\n        <MessagesContainer />\r\n      </SimpleBar>\r\n      <Row className=\"send-message\">\r\n        <Col xs={8} className=\"send-message-input\">\r\n          <textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\" value={newMessage} onChange={e=> setNewMessage(e.target.value)}></textarea>\r\n        </Col>\r\n        <Col className=\"send-message-button\">\r\n          <Button className=\"form-buttom\" onClick={() => {\r\n            createMessage({\r\n              variables:{\r\n                content: newMessage,\r\n                id:user.id,\r\n                nickname:user.nickname\r\n              }\r\n            });\r\n            setNewMessage('');\r\n          }}>Enviar</Button>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {Container, Row, Col, Button} from 'react-bootstrap';\r\nimport \"./UserForm.css\"\r\nimport { useMutation } from '@apollo/client';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n    UserLoginMutation\r\n  } from '../data/Query';\r\nexport default function UserForm(props) {\r\n    \r\n    //inicializa hooks\r\n    const history = useHistory();\r\n    const [userState, setUserState] = useState({\r\n        id:'',\r\n        nickname: '',\r\n      });\r\n\r\n\r\n    //verifica se usuário ja está logado e redireciona para o chat\r\n    let user = localStorage.getItem('token');\r\n    if(user){\r\n        history.push(\"/chat\");\r\n    }\r\n\r\n\r\n    \r\n    const [loginUser] = useMutation(UserLoginMutation,\r\n        {\r\n          onCompleted({ loginUser }) {\r\n            if (loginUser) {\r\n              localStorage.setItem('token', loginUser.id);\r\n              history.push(\"/chat\");\r\n            }\r\n          }\r\n        });\r\n\r\n    const submitUser =  (e) => {\r\n            e.preventDefault();\r\n            loginUser({\r\n                variables:{\r\n                    nickname: userState.nickname,\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n  return (\r\n    <Container className=\"user-container\">\r\n        <div className=\"user-wrapper\">\r\n\r\n        <Row className=\"justify-content-md-center\">\r\n            <Col md={6}>\r\n                <h1>Escolha o seu Nickname:</h1>\r\n            </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-md-center\">\r\n            <Col md={6}>\r\n                <form className=\"form-card\" onSubmit={(e) => submitUser(e)}>\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <Col xs={8}>\r\n                            <input className=\"user-input\" value={userState.nickname} onChange={(e) =>\r\n                                setUserState({\r\n                                    ...userState,\r\n                                    nickname: e.target.value\r\n                                })\r\n                            }\r\n                            >\r\n                            </input>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <Button type=\"submit\" className=\"form-buttom\">Entrar no Chat</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </form>\r\n            </Col>\r\n        </Row>\r\n        </div>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport Chat from './view/Chat';\r\nimport UserForm from './view/UserForm';\r\n\r\n \r\nexport default function App(props) {\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <Router>\r\n            <Switch>\r\n                <Route path=\"/chat\">\r\n                    <Chat titulo=\"Chat\"/>\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <UserForm titulo=\"Registre-se\"/>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n        </>\r\n    )\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./index.css\";\n\nimport { ApolloClient, InMemoryCache, split, HttpLink, ApolloProvider } from '@apollo/client';\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition } from 'apollo-utilities';\n\nimport App from \"./App\";\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000/'\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/graphql`,\n  options: {\n    reconnect: true,\n    lazy: true,\n    inactivityTimeout: 30000,\n  }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  },\n  wsLink,\n  httpLink,\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}